;~ #include "../_lib/ti83.inc"
.org 0x9327

; This is a little pulse wave synthesizer.
; Currently monophonic, but extensible to polyphonic theoratically

; Reads the keys pressed. Returns the last pressed key in the key group.
; Takes key code in b. Destroys a, b, c. Key index is in &key_reg
get_key_pressed .macro key_reg, next_key_reg
	; Go through the key bits and find the set/pressed one. Write to &key_reg
find_bits_&key_reg:
	inc a
	sra b
	jr nc, skip_set_&key_reg ; If bit 0 is set, save index
	ld &key_reg, a
	
	if "&key_reg" != "&next_key_reg"
	jr skip_set_&next_key_reg
	endif
	
skip_set_&key_reg:
	cp 8
	jp nz, find_bits_&key_reg ; If a is not zero yet, repeat loop
	; TODO: Reset cycle_pos when no key is pressed to prevent halt on high which silences other voice
	
	if "&key_reg" != "&next_key_reg"
	jr skip_set_&next_key_reg
	endif
	
	.endm
;get_key_pressed

; Advances the cycle position stored in ram by the appropiate amount, selected by the cycle step
; index value passed.
; Cycle step index register in &key_reg (not c!). Destroys hl, bc. New cycle pos is in hl.
add_cycle_step .macro key_reg, voice_n
	; Ensure that key index value is in c (we need it there)
	ld c, &key_reg

	; Load cycle step
	ld hl, CYCLE_SPEEDS
	ld b, 0 ; this depends on key index value being in c
	add hl, bc
	add hl, bc
	ld bc, (hl) ; Can be spread out (load both bytes individually) to save 4 bytes
	
	; Add cycle step
	ld hl, (cycle_pos + 2 * &voice_n)
	add hl, bc
cycle_step_load_&voice_n:
	ld (cycle_pos + 2 * &voice_n), hl
	
	.endm
;load_cycle_step

; Writes audio sample on to link port.
; Takes audio sample in a. Destroys a. Returns nothing
write_audio .macro
	; If first voice is high, write high
	and SAMPLE_BIT_MASK
	jp z, set_audio_val_high
	
	; or if second voice is high, write high
	ld a, h
	and SAMPLE_BIT_MASK
	jp z, set_audio_val_high
	
	xor a ; Otherwise write low
	jp set_audio_val_end
set_audio_val_high:
	ld a, 3
set_audio_val_end:
	out (0), a
	
	.endm
;write_audio

main:
	di ; Interrupts mess with low-level key input
	
main_loop:
	; Get keys pressed
	ld a, 0b11101111
	out (1), a
	in a, (1)
	xor 255 ; negate so that 1=pressed and 0=not pressed, instead of the other way around
	ld b, a ; Stores key group code
	
	; The a zeroing has to be executed before a get_key_pressed chain
	xor a ; a is counted up per bit
	ld de, 0
	get_key_pressed d, e
	get_key_pressed e, e

	exx
	ld b, 255
sample_loop:
	exx
	
	add_cycle_step d, 0
	ld a, h
	add_cycle_step e, 1
	write_audio
	
	exx
	djnz sample_loop
	exx
	
	jr main_loop ; TODO: exit condition
	
	ei
	ret
;main

;~ add_cycle_step_fn:
	;~ add_cycle_step
	;~ ret

;~ write_audio_fn:
	;~ write_audio
	;~ ret

SAMPLE_BIT_MASK .equ 0b11100000

;;;;;;;;;;;;;;;;;;;
;; RAM VARIABLES ;;
;;;;;;;;;;;;;;;;;;;
cycle_pos:
	; Voices' initial values mustn't be zero because then they'll be high and thus silencing
	.dw 0xFFFF
	.dw 0xFFFF
CYCLE_SPEEDS:
	.dw 0
	.dw 1239, 1391, 1474, 1654, 1857, 1968, 2208, 2479, 2782, 2948
